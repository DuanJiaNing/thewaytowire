// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package main

import (
	"context"
	"github.com/google/wire"
	"net/http"
	"thewaytowire/conf"
	"thewaytowire/db"
	"thewaytowire/handler/image"
	"thewaytowire/handler/tests"
	"thewaytowire/handler/user"
)

// Injectors from injector.go:

func setup(ctx context.Context) (*http.Server, func(), error) {
	postgresClient, err := db.NewPostgresClient()
	if err != nil {
		return nil, nil, err
	}
	configFilePath := _wireConfigFilePathValue
	config, err := conf.Load(configFilePath)
	if err != nil {
		return nil, nil, err
	}
	service := user.NewService(postgresClient, config)
	imageService := image.NewService()
	handler := user.NewHandler(service, imageService)
	testsHandler := tests.NewHandler()
	handlers := &Handlers{
		User:  handler,
		Tests: testsHandler,
	}
	server := NewServer(handlers, config)
	return server, func() {
	}, nil
}

var (
	_wireConfigFilePathValue = conf.ConfigFilePath("config.yaml")
)

// injector.go:

var configSet = wire.NewSet(wire.Value(conf.ConfigFilePath("config.yaml")), conf.Load)

var datasourceSet = wire.NewSet(db.NewPostgresClient, wire.Bind(new(db.Client), new(*db.PostgresClient)))

var serviceSet = wire.NewSet(image.NewService, user.NewService, wire.Bind(new(user.ImageServiceProvider), new(*image.Service)))

var handlerSet = wire.NewSet(user.NewHandler, tests.NewHandler, wire.Struct(new(Handlers), "*"))
